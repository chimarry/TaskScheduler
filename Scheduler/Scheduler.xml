<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Scheduler</name>
    </assembly>
    <members>
        <member name="T:Scheduler.CooperationMechanism">
            <summary>
            Mechanism for cooperative task cancelling and context switching.
            </summary>
        </member>
        <member name="P:Scheduler.CooperationMechanism.IsCancelled">
            <summary>
            Indicates whether the task has been cooperatively cancelled.
            </summary>
        </member>
        <member name="P:Scheduler.CooperationMechanism.CanBePaused">
            <summary>
            Inidicates whether the task can be paused (used for context switching).
            </summary>
        </member>
        <member name="P:Scheduler.CooperationMechanism.PausedFor">
            <summary>
            Indicates a total time that the task has been paused for.
            </summary>
        </member>
        <member name="P:Scheduler.CooperationMechanism.IsPaused">
            <summary>
            Indicates whether the task is paused.
            </summary>
        </member>
        <member name="P:Scheduler.CooperationMechanism.IsResumed">
            <summary>
            Indicates whether the task has been resumed.
            </summary>
        </member>
        <member name="M:Scheduler.CooperationMechanism.Cancel">
            <summary>
            Task should be cancelled cooperatively.
            </summary>
        </member>
        <member name="M:Scheduler.CooperationMechanism.Pause(System.Int32)">
            <summary>
            Task should be paused cooperatively.
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:Scheduler.CooperationMechanism.Resume">
            <summary>
            Resume task.
            </summary>
        </member>
        <member name="T:Scheduler.CoreTaskScheduler">
            <summary>
            Abstract class used for priority task scheduling.
            </summary>
        </member>
        <member name="F:Scheduler.CoreTaskScheduler.pendingTasks">
            <summary>
            Queue containg pending tasks.
            </summary>
        </member>
        <member name="F:Scheduler.CoreTaskScheduler.maxLevelOfParallelism">
            <summary>
            Number of user's task that can be run in parallel.
            </summary>
        </member>
        <member name="F:Scheduler.CoreTaskScheduler.schedulingLocker">
            <summary>
            Basic locker.
            </summary>
        </member>
        <member name="M:Scheduler.CoreTaskScheduler.QueueForScheduling(System.Collections.Generic.IList{Scheduler.PrioritizedLimitedTask})">
            <summary>
            Queues multiple actions for scheduling.
            </summary>
            <param name="tasksForScheduling">List of actions to schedule</param>
        </member>
        <member name="M:Scheduler.CoreTaskScheduler.SortPendingTasks">
            <summary>
            Sorts pending tasks descending by priority <see cref="T:Scheduler.Priority"/>
            </summary>
        </member>
        <member name="M:Scheduler.CoreTaskScheduler.GetNextTaskWithDeadlockAvoidance">
            <summary>
            Finds and returns a task that has all necessary resources and allocates those resources. 
            It assumes that list is not empty, so a caller of this method needs to check that.
            </summary>
        </member>
        <member name="M:Scheduler.CoreTaskScheduler.StartCallback(Scheduler.PrioritizedLimitedTask,System.Action,System.Action)">
            <summary>
            Starts (creates and schedules) task that is used to cooperatively cancels (and optionally pauses) user's task. 
            Is user's task used resources, resources are released.
            This task is scheduled using default .NET scheduler.
            </summary>
            <param name="task">Corresponding user's task</param>
            <param name="controlNumberOfExecutionTasksAction">Responsible for decrementing number of currently running tasks</param>
            <param name="enablePauseAction">Responsible for pausing this callback for specific amount of time (optional)</param>
        </member>
        <member name="T:Scheduler.NonPreemptiveTaskScheduler">
            <summary>
            Implements task scheduler <see cref="T:Scheduler.CoreTaskScheduler"/> as non-preemptive task scheduler.
            </summary>
        </member>
        <member name="F:Scheduler.NonPreemptiveTaskScheduler.currentlyRunningTasks">
            <summary>
            Number of currently running tasks.
            </summary>
        </member>
        <member name="M:Scheduler.NonPreemptiveTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>
            Schedules task based on priority and without interrupting currently running tasks.
            </summary>
            <param name="task">Task to be scheduled (must extend <see cref="T:Scheduler.PrioritizedLimitedTask"/>), 
            otherwise exception will be thrown</param>
            <exception cref="T:Scheduler.InvalidTaskException"></exception>
        </member>
        <member name="M:Scheduler.NonPreemptiveTaskScheduler.RunScheduling">
            <summary>
            Using preemptive scheduling algorithm, runs task.
            </summary>
        </member>
        <member name="T:Scheduler.PreemptiveTaskScheduler">
            <summary>
            Implements task scheduler <see cref="T:Scheduler.CoreTaskScheduler"/> as preemptive task scheduler.
            </summary>
        </member>
        <member name="F:Scheduler.PreemptiveTaskScheduler.executingTasks">
            <summary>
            Collection that stores information about tasks that are currently running.
            </summary>
        </member>
        <member name="M:Scheduler.PreemptiveTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>
            Schedules task based on a priority. If the task has a greater prirority than one of the currently running tasks, 
            and if one of the currently running tasks allows cooperative context-switching, than context-switching will happen.
            </summary>
            <param name="task">Task to be scheduled (must extend <see cref="T:Scheduler.PrioritizedLimitedTask"/>), 
            otherwise exception will be thrown</param>
            <exception cref="T:Scheduler.InvalidTaskException"></exception>
        </member>
        <member name="M:Scheduler.PreemptiveTaskScheduler.PauseCallback(Scheduler.PrioritizedLimitedTask)">
            <summary>
            Delays execution of a callback for specific amount of time.
            </summary>
            <param name="taskWithInformation">Task that contains information about that time.</param>
        </member>
        <member name="M:Scheduler.PreemptiveTaskScheduler.RunScheduling">
            <summary>
            Using preemptive algorithm, runs tasks (number of tasks dependins on parallelism level).
            Deadlock avoidance is enabled.
            </summary>
        </member>
        <member name="M:Scheduler.PreemptiveTaskScheduler.RunTask(Scheduler.PrioritizedLimitedTask)">
            <summary>
            Executes specified task and starts cooresponding callback necessary for cooperation.
            </summary>
            <param name="taskWithInformation">Task to be executed</param>
        </member>
        <member name="M:Scheduler.PreemptiveTaskScheduler.RequestContextSwitch(Scheduler.PrioritizedLimitedTask,Scheduler.PrioritizedLimitedTask)">
            <summary>
            This method simulates a context switch (pauses one task, and runs another) if there is a guarantee that deadlock won't happen. 
            If a task does not get necessary resources, normal scheduling is called (no context switching and no interruption).
            </summary>
            <param name="taskForExecution">Task to be executed</param>
            <param name="taskToPause">Task to pause</param>
        </member>
        <member name="M:Scheduler.PreemptiveTaskScheduler.CanAvoidDeadlock(Scheduler.PrioritizedLimitedTask)">
            <summary>
            If a task uses no shared resources, deadlock will be avoided. Otherwise, 
            call is delegated to a manager that uses Banker's algorithm and decides whether deadlock can be avoided <see cref="T:Scheduler.IBankerAlgorithm"/>. 
            </summary>
        </member>
        <member name="T:Scheduler.PrioritizedLimitedTask">
            <summary>
            Encapsulate an action passed to a task scheduler, with each action having its priority and max duration.
            </summary>
        </member>
        <member name="P:Scheduler.PrioritizedLimitedTask.PrioritizedLimitedTaskIdentifier">
            <summary>
            Unique identifier for an action
            </summary>
        </member>
        <member name="P:Scheduler.PrioritizedLimitedTask.Action">
            <summary>
            An action to be executed
            </summary>
        </member>
        <member name="P:Scheduler.PrioritizedLimitedTask.Priority">
            <summary>
            A priority of the action
            <see cref="P:Scheduler.PrioritizedLimitedTask.Priority"/>
            </summary>
        </member>
        <member name="P:Scheduler.PrioritizedLimitedTask.DurationInMiliseconds">
            <summary>
            Maximum time for an execution of the action (given in miliseconds)
            </summary>
        </member>
        <member name="T:Scheduler.Priority">
            <summary>
            Represents possible priorities of an action.
            </summary>
        </member>
        <member name="M:Scheduler.PriorityComparer.Compare(Scheduler.Priority,Scheduler.Priority)">
            <summary>
            Compares two priorities <see cref="T:Scheduler.Priority"/> using default enum comparator.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Scheduler.BankerAlgorithm">
            <summary>
            Using a banker's algorithm, this class manages.
            </summary>
        </member>
        <member name="F:Scheduler.BankerAlgorithm.availableSharedResources">
            <summary>
            Collection that stores information about shared resources that are needed for 
            deadlock prevention. Key is an unique identifier of the resource, and value is 
            a number of instances of that resource.
            </summary>
        </member>
        <member name="F:Scheduler.BankerAlgorithm.registeredProcesses">
            <summary>
            Collection that stores information about processes.
            </summary>
        </member>
        <member name="F:Scheduler.BankerAlgorithm.maximumDemandes">
            <summary>
            Represents matrix that defines the maximum demand of each process in a system.
            </summary>
        </member>
        <member name="F:Scheduler.BankerAlgorithm.allocatedResources">
            <summary>
            Represents matrix that defines the number of resources of each type currently allocated to each process.
            </summary>
        </member>
        <member name="F:Scheduler.BankerAlgorithm.neededResources">
            <summary>
            Represents matrix that indicates the remaining resource need of each process.
            </summary>
        </member>
        <member name="M:Scheduler.BankerAlgorithm.AllocateResources(System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            It is meant to be used by a process that wants to access a shared resources. Depending on the success of an allocation, 
            appropriate enum value <see cref="T:Scheduler.RequestApproval"/> will be returned. If the process demands more resource's instances 
            than what is it said it will use, the request will be denied.
            </summary>
            <param name="processIdentifier">Unique identifier for the process in the system</param>
            <param name="sharedResource">Information about the shared resource that process is requesting</param>
            <returns>Appropriate enum value <see cref="T:Scheduler.RequestApproval"/></returns>
        </member>
        <member name="M:Scheduler.BankerAlgorithm.FreeResources(System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            Process can free an allocated shared resources by calling this method. If process does not need 
            to access shared resources after calling this method, it will become unregistered.
            </summary>
            <param name="processIdentifier">Unique identifier for the process</param>
            <param name="sharedResources">Information about the allocated shared resources, like unique identifier for a
            resource and number of instances that process consumed</param>
        </member>
        <member name="M:Scheduler.BankerAlgorithm.ReinitializeAllocation(System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            This method changes allocation table for a specific process.
            </summary>
            <param name="processIdentifier">Unique identifier for the process</param>
            <param name="allocatedResources">Information about resources' allocation</param>
        </member>
        <member name="M:Scheduler.BankerAlgorithm.RegisterProcess(System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            Process needs to be registered to be able to access shared resources.
            </summary>
            <param name="processIdentifier">Unique identifier for the process</param>
            <param name="sharedResources">Information about shared resources that will be needed by the process 
            (maximum number of instances that the process may demand)</param>
        </member>
        <member name="M:Scheduler.BankerAlgorithm.RegisterResource(Scheduler.ISharedResource,System.Int32)">
            <summary>
            To be able to control access to a shared resource, that resource must be registered.
            </summary>
            <param name="sharedResource">Resource that needs to be registered (Only identifier is necessary)</param>
            <param name="instancesCount">Number of available instances of that resource</param>
        </member>
        <member name="M:Scheduler.BankerAlgorithm.IsInSafeState">
            <summary>
            Using Banker's algorithm, this method checks whether the system will be in the safe state after 
            process accesses shared resources.
            </summary>
            <returns>True if system will remain in the safe state, and false if not</returns>
        </member>
        <member name="T:Scheduler.ISharedResource">
            <summary>
            Implement this interface if you want to declare a system's shared resource.
            </summary>
        </member>
        <member name="M:Scheduler.ISharedResource.GetResourceIdentifier">
            <summary>
            Returns identifier for a shared resource. Identifier is unique on a class level, that means
            if there are "n" instances of a shared resource, there will be one unique identifier for all of them.
            </summary>
        </member>
    </members>
</doc>
